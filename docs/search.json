[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Analysis of American-Housing-Estimates",
    "section": "",
    "text": "1 Introduction :\nFor this project, we chose to explore housing estimates across the United States. This topic resonates with us personally as we transition into living independently and managing housing expenses ourselves. We found it compelling to analyze how housing prices have been changing over recent times and to identify the key factors driving these changes. In addition, this topic is particularly relevant given the ongoing challenges surrounding housing affordability, availability, and demographic shifts in the United States. Key questions we would like to address are: How do housing availability and affordability vary across different regions and income levels? Are there patterns in housing disparities that align with socioeconomic or geographic factors? Are there specific features/traits of housing that are key in determining prcing and are these the same factors that were important before? By addressing these questions, we aim to provide insights into the factors driving housing trends and inform potential policy interventions to address housing inequalities.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction :</span>"
    ]
  },
  {
    "objectID": "data.html",
    "href": "data.html",
    "title": "2  Data",
    "section": "",
    "text": "2.1 Description\n(ACS) 5-Year Housing Estimates. The data is collected and maintained by the U.S. Census Bureau, which conducts comprehensive surveys to assess housing characteristics across counties in the United States and the specific dataset we are using is for the years 2016-2020. The dataset is provided in a CSV format and includes over 240 columns with variables such as total housing units, occupancy rates, and housing costs. These variables are measured and updated annually, with detailed geographic identifiers for each county. The data is well-documented, and the source is reliable for understanding housing trends at a granular level. To import the data, I used standard data manipulation tools. Some challenges include the large number of columns and potential for missing values, which require preprocessing for effective analysis. Additionally, the original column names in the dataset are not clear and understandable so we need to rename the columns for clarity. The dataset can be accessed directly from the U.S. Census Bureau’s data repository.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Data</span>"
    ]
  },
  {
    "objectID": "data.html#missing-value-analysis",
    "href": "data.html#missing-value-analysis",
    "title": "2  Data",
    "section": "2.2 Missing value analysis",
    "text": "2.2 Missing value analysis\n\n\nCode\nlibrary(tidyverse)  \n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nCode\nlibrary(naniar) \n\n\nWarning: package 'naniar' was built under R version 4.4.2\n\n\nCode\nfile_path &lt;- \"ACS_5YR_Housing_Estimate_Data_by_County_-8702403216850992228.csv\"\nhousing_data &lt;- read.csv(file_path)\n\nfiltered_data &lt;- housing_data %&gt;%\n  rename(\n    Occupancy_Status = B25002EST1,\n    Tenure_By_Household_Size = B25009EST2,\n    Median_Number_Of_Rooms_By_Tenure = B25021EST1,\n    Units_In_Structure = B25024EST2,\n    Tenure_By_Units_In_Structure = B25032EST2,\n    Tenure_By_Year_Structure_Built = B25036_OWN_80TO99,\n    Median_Year_Structure_Built_By_Tenure = B25037EST3,\n    Bedrooms = B25041EST2,\n    Tenure_By_Bedrooms = B25042EST3,\n    Contract_Rent = B25056_500TO599,\n    Median_Contract_Rent = B25058EST1,\n    Bedrooms_By_Gross_Rent = B25068EST2,\n    Mortgage_Status_By_Median_Value = B25097EST1,\n    Tenure_By_Selected_Physical_And_Financial_Conditions = B25123_TOT\n  )\n\ncolumns_to_keep &lt;- c(\n  \"Occupancy_Status\",\n  \"Tenure_By_Household_Size\",\n  \"Median_Number_Of_Rooms_By_Tenure\",\n  \"Units_In_Structure\",\n  \"Tenure_By_Units_In_Structure\",\n  \"Tenure_By_Year_Structure_Built\",\n  \"Median_Year_Structure_Built_By_Tenure\",\n  \"Bedrooms\",\n  \"Tenure_By_Bedrooms\",\n  \"Contract_Rent\",\n  \"Median_Contract_Rent\",\n  \"Bedrooms_By_Gross_Rent\",\n  \"Mortgage_Status_By_Median_Value\",\n  \"Tenure_By_Selected_Physical_And_Financial_Conditions\",\n  \"OBJECTID_1\", \"GEOID\", \"STATE\", \"STUSAB\", \"STATE_NAME\", \"COUNTY\", \"NAME\"\n)\n\nfiltered_data &lt;- filtered_data %&gt;%\n  select(all_of(columns_to_keep))\n\nprint(\"Renamed and Filtered Columns:\")\n\n\n[1] \"Renamed and Filtered Columns:\"\n\n\nCode\nprint(colnames(filtered_data))\n\n\n [1] \"Occupancy_Status\"                                    \n [2] \"Tenure_By_Household_Size\"                            \n [3] \"Median_Number_Of_Rooms_By_Tenure\"                    \n [4] \"Units_In_Structure\"                                  \n [5] \"Tenure_By_Units_In_Structure\"                        \n [6] \"Tenure_By_Year_Structure_Built\"                      \n [7] \"Median_Year_Structure_Built_By_Tenure\"               \n [8] \"Bedrooms\"                                            \n [9] \"Tenure_By_Bedrooms\"                                  \n[10] \"Contract_Rent\"                                       \n[11] \"Median_Contract_Rent\"                                \n[12] \"Bedrooms_By_Gross_Rent\"                              \n[13] \"Mortgage_Status_By_Median_Value\"                     \n[14] \"Tenure_By_Selected_Physical_And_Financial_Conditions\"\n[15] \"OBJECTID_1\"                                          \n[16] \"GEOID\"                                               \n[17] \"STATE\"                                               \n[18] \"STUSAB\"                                              \n[19] \"STATE_NAME\"                                          \n[20] \"COUNTY\"                                              \n[21] \"NAME\"                                                \n\n\n\n\nCode\nmissing_summary &lt;- filtered_data %&gt;%\n  summarise(across(everything(), ~ sum(is.na(.)))) %&gt;%\n  pivot_longer(cols = everything(), names_to = \"Column\", values_to = \"MissingCount\") %&gt;%\n  arrange(desc(MissingCount))\n\nprint(\"Missing Values Summary:\")\n\n\n[1] \"Missing Values Summary:\"\n\n\nCode\nprint(missing_summary)\n\n\n# A tibble: 21 × 2\n   Column                                MissingCount\n   &lt;chr&gt;                                        &lt;int&gt;\n 1 Median_Contract_Rent                            12\n 2 Mortgage_Status_By_Median_Value                  5\n 3 Occupancy_Status                                 0\n 4 Tenure_By_Household_Size                         0\n 5 Median_Number_Of_Rooms_By_Tenure                 0\n 6 Units_In_Structure                               0\n 7 Tenure_By_Units_In_Structure                     0\n 8 Tenure_By_Year_Structure_Built                   0\n 9 Median_Year_Structure_Built_By_Tenure            0\n10 Bedrooms                                         0\n# ℹ 11 more rows\n\n\nCode\nmissing_summary &lt;- missing_summary %&gt;%\n  mutate(MissingPercentage = (MissingCount / nrow(filtered_data)) * 100)\n\nprint(\"Missing Values Percentage:\")\n\n\n[1] \"Missing Values Percentage:\"\n\n\nCode\nprint(missing_summary)\n\n\n# A tibble: 21 × 3\n   Column                                MissingCount MissingPercentage\n   &lt;chr&gt;                                        &lt;int&gt;             &lt;dbl&gt;\n 1 Median_Contract_Rent                            12             0.373\n 2 Mortgage_Status_By_Median_Value                  5             0.155\n 3 Occupancy_Status                                 0             0    \n 4 Tenure_By_Household_Size                         0             0    \n 5 Median_Number_Of_Rooms_By_Tenure                 0             0    \n 6 Units_In_Structure                               0             0    \n 7 Tenure_By_Units_In_Structure                     0             0    \n 8 Tenure_By_Year_Structure_Built                   0             0    \n 9 Median_Year_Structure_Built_By_Tenure            0             0    \n10 Bedrooms                                         0             0    \n# ℹ 11 more rows\n\n\nCode\nrow_missing_summary &lt;- filtered_data %&gt;%\n  mutate(MissingCount = rowSums(is.na(.))) %&gt;%\n  group_by(MissingCount) %&gt;%\n  summarize(Count = n()) %&gt;%\n  arrange(MissingCount)\n\nggplot(row_missing_summary, aes(x = MissingCount, y = Count)) +\n  geom_bar(stat = \"identity\", fill = \"skyblue\", color = \"black\", width = 0.8) +\n  geom_text(aes(label = Count), vjust = -0.3, size = 4) +\n  scale_x_continuous(breaks = 0:max(row_missing_summary$MissingCount)) +\n  labs(\n    title = \"Distribution of Missing Data Across Rows\",\n    subtitle = \"Number of rows with varying levels of missing data\",\n    x = \"Number of Missing Values in a Row\",\n    y = \"Frequency (Number of Rows)\"\n  ) +\n  theme_minimal(base_size = 12) +\n  theme(\n    axis.text.x = element_text(size = 10),\n    axis.text.y = element_text(size = 10),\n    plot.title = element_text(hjust = 0.5, size = 16),\n    plot.subtitle = element_text(hjust = 0.5, size = 12)\n  )\n\n\n\n\n\n\n\n\n\nThis bar plot provides an overview of missing data across rows, illustrating how many rows have varying levels of missing values. It reveals that the data set is mostly complete, with 3,206 rows containing no missing values. Only 13 rows have one missing value, and 2 rows have only two missing values. This low level of missing values indicates that removing rows with missing data would not significantly reduce the dataset’s size or quality, making it an ideal candidate for robust analysis.\n\n\nCode\nlibrary(stringr)  \n\nggplot(missing_summary, aes(x = reorder(Column, -MissingPercentage), y = MissingPercentage)) +\n  geom_bar(stat = \"identity\", fill = \"steelblue\", color = \"black\") +\n  geom_text(aes(label = paste0(round(MissingPercentage, 1), \"%\")), \n            hjust = -0.2, size = 3.5) +\n  coord_flip() +\n  labs(\n    title = \"Percentage of Missing Values by Column\",\n    subtitle = str_wrap(\"Highlighting the extent of missing data in each variable\", 50),\n    x = \"Columns\",\n    y = \"Percentage Missing\"\n  ) +\n  scale_y_continuous(breaks = seq(0, 0.5, by = 0.05)) +\n  theme_minimal(base_size = 14) +\n  theme(\n    axis.text.y = element_text(size = 6, angle = 45, hjust = 1),\n    axis.text.x = element_text(size = 10),\n    plot.title = element_text(hjust = 0.5, size = 16),\n    plot.subtitle = element_text(hjust = 0.5, size = 14),\n    plot.margin = margin(60, 20, 40, 20)\n  )\n\n\n\n\n\n\n\n\n\nCode\nggsave(\"missing_values_plot_fixed.png\", width = 12, height = 9)\n\n\nThis graph complements the previous graphic as it shows the columns with missing values. The one difference is this one shows the missing values per column as a percentage of total rows. It reveals that only two columns have a significant amount of missing values. Those two columns are the the Mortgage_Status_By_Median_Value and the “Median_Contract_Rent”. Overall, this shows that the data set is highly reliable and has minimal data loss.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Data</span>"
    ]
  },
  {
    "objectID": "data.html#loading-data",
    "href": "data.html#loading-data",
    "title": "2  Data",
    "section": "2.2 Loading data",
    "text": "2.2 Loading data\n\n\nCode\nlibrary(dplyr)\n\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\n\nCode\nlibrary(readxl)\nlibrary(tidyverse)\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ forcats   1.0.0     ✔ readr     2.1.5\n✔ ggplot2   3.5.1     ✔ stringr   1.5.1\n✔ lubridate 1.9.3     ✔ tibble    3.2.1\n✔ purrr     1.0.2     ✔ tidyr     1.3.1\n\n\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nCode\ninfo_path = \"rawData/DD_ACS_5-Year_Housing_Estimate_Data_by_County.xlsx\"\ndata_path = \"rawData/ACS_5YR_Housing_Estimate_Data_by_County_-8702403216850992228.csv\"\n\ncolumn_info &lt;- read_excel(info_path)\ndata &lt;- read.csv(data_path)",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Data</span>"
    ]
  },
  {
    "objectID": "data.html#cleaning-data",
    "href": "data.html#cleaning-data",
    "title": "2  Data",
    "section": "2.3 Cleaning Data",
    "text": "2.3 Cleaning Data\n\n\nCode\ncolnames(column_info) &lt;- gsub(\" \", \"_\", colnames(column_info))\n\ncolumn_info &lt;- column_info |&gt;\n  filter(!grepl(\"as a %\", Column_Description)) |&gt;\n  filter(!grepl(\"B25068|B25058\", Column_Name))\n\ndata &lt;- data |&gt;\n  select(-contains(\"B25068\"), -contains(\"B25058\")) |&gt; \n  select(-contains(\"PCT\"))\n\ncolumn_info$Column_Description &lt;- gsub(\" \", \"_\", column_info$Column_Description)\n\ncolumn_info$Column_Description &lt;- gsub(\"[^[:alnum:]_]\", \n                                       \"\", \n                                       column_info$Column_Description)\ntable_name_mapping &lt;- c(\n  \"B25002\" = \"Occupancy_Status\",\n  \"B25009\" = \"Tenure_By_Household_Size\",\n  \"B25021\" = \"Median_Number_Of_Rooms_By_Tenure\",\n  \"B25024\" = \"Units_In_Structure\",\n  \"B25032_OWN_\" = \"Owner_Tenure_By_Units_In_Structure\",\n  \"B25032_RENT\" = \"Renter_Tenure_By_Units_In_Structure\",\n  \"B25036_OWN_\" = \"Owner_Tenure_By_Year_Structure_Built\",\n  \"B25036_RENT\" = \"Renter_Tenure_By_Year_Structure_Built\",\n  \"B25037\" = \"Median_Year_Structure_Built_By_Tenure\",\n  \"B25041\" = \"Bedrooms\",\n  \"B25042\" = \"Tenure_By_Bedrooms\",\n  \"B25056\" = \"Contract_Rent\",\n  \"B25123\" = \"Tenure_By_Selected_Physical_And_Financial_Conditions\"\n)\n\nowner_columns &lt;- c(\"B25032EST2\", \"B25032EST3\", \"B25032EST4\")\nrenter_columns &lt;- c(\"B25032EST13\", \"B25032EST14\", \"B25032EST15\")\n\ncolumn_info$Column_Name &lt;- sapply(column_info$Column_Name, function(colname) {\n  if (colname %in% owner_columns) {\n    return(gsub(\"B25032EST\", \"B25032_OWN_EST\", colname))  # For Owner columns\n  } else if (colname %in% renter_columns) {\n    return(gsub(\"B25032EST\", \"B25032_RENT_EST\", colname))  # For Renter columns\n  }\n  return(colname)  # Keep other column names unchanged\n})\n\n\n# Function to update column names in data df\ncolnames(data) &lt;- sapply(colnames(data), function(colname) {\n  if (colname %in% owner_columns) {\n    # If the column is in the Owner list, append '_OWN_' to the name\n    return(gsub(\"B25032EST\", \"B25032_OWN_EST\", colname))\n  } else if (colname %in% renter_columns) {\n    # If the column is in the Renter list, append '_RENT_' to the name\n    return(gsub(\"B25032EST\", \"B25032_RENT_EST\", colname))\n  }\n  return(colname)\n})\n\nmodify_column_description &lt;- function(column_name, description) {\n  prefix &lt;- substr(column_name, 1, 6)\n  prefix11 &lt;- substr(column_name, 1, 11)\n\n  table_name &lt;- table_name_mapping[prefix]\n  table_name_11 &lt;- table_name_mapping[prefix11]\n  if (!is.na(table_name_11) && prefix %in% c(\"B25036\", \"B25032\")) {\n    new_description &lt;- paste(table_name_11, \"(\", description, \")\", sep = \"\")\n    return(new_description)\n  } else if (!is.na(table_name)) {\n    new_description &lt;- paste(table_name, \"(\", description, \")\", sep = \"\")\n    return(new_description)\n  }\n  return(description)\n}\n\ncolumn_info$Column_Description &lt;- mapply(modify_column_description, \n                                         column_info$Column_Name, \n                                         column_info$Column_Description)\n\nexclude_columns &lt;- \n  c(\"OBJECTID\", \"GEOID\", \"STATE\", \"COUNTY\", \"NAME\", \"STUSAB\", \"STATE_NAME\")\n\ncolumn_info_filtered &lt;- column_info |&gt;\n  filter(!Column_Name %in% exclude_columns)\n\ncolumn_name_to_description &lt;- setNames(column_info_filtered$Column_Description, \n                                       column_info_filtered$Column_Name)\n\ncolnames(data) &lt;- ifelse(colnames(data) %in% names(column_name_to_description),\n                         column_name_to_description[colnames(data)],\n                         colnames(data))\n\ndata &lt;- data %&gt;%\n  select(-c(\"B25123_TOT\", \"B25123_TOT_1\", \"B25123_TOT_2\", \n            \"B25123_TOT_3\", \"B25123_TOT_4\"))\n\nprint(\"Renamed Columns:\")\n\n\n[1] \"Renamed Columns:\"\n\n\nCode\nprint(colnames(data))\n\n\n  [1] \"OBJECTID_1\"                                                                                          \n  [2] \"GEOID\"                                                                                               \n  [3] \"STATE\"                                                                                               \n  [4] \"STUSAB\"                                                                                              \n  [5] \"STATE_NAME\"                                                                                          \n  [6] \"COUNTY\"                                                                                              \n  [7] \"NAME\"                                                                                                \n  [8] \"Occupancy_Status(Total_Housing_units)\"                                                               \n  [9] \"Occupancy_Status(Occupied_housing_units)\"                                                            \n [10] \"Occupancy_Status(Vacant)\"                                                                            \n [11] \"Tenure_By_Household_Size(Owner_Occupied)\"                                                            \n [12] \"Tenure_By_Household_Size(Owner_Occupied_1Person_Household)\"                                          \n [13] \"Tenure_By_Household_Size(Owner_Occupied_2Person_Household)\"                                          \n [14] \"Tenure_By_Household_Size(Owner_Occupied_3Person_Household)\"                                          \n [15] \"Tenure_By_Household_Size(Owner_Occupied_4Person_Household)\"                                          \n [16] \"Tenure_By_Household_Size(Owner_Occupied_5Person_Household)\"                                          \n [17] \"Tenure_By_Household_Size(Owner_Occupied_6ormore_Person_Household)\"                                   \n [18] \"Tenure_By_Household_Size(Renter_Occupied)\"                                                           \n [19] \"Tenure_By_Household_Size(Renter_Occupied_1Person_Household)\"                                         \n [20] \"Tenure_By_Household_Size(Renter_Occupied_2Person_Household)\"                                         \n [21] \"Tenure_By_Household_Size(Renter_Occupied_3Person_Household)\"                                         \n [22] \"Tenure_By_Household_Size(Renter_Occupied_4Person_Household)\"                                         \n [23] \"Tenure_By_Household_Size(Renter_Occupied_5Person_Household)\"                                         \n [24] \"Tenure_By_Household_Size(Renter_Occupied_6ormore_Person_Household)\"                                  \n [25] \"Tenure_By_Household_Size(Total_1Person_Household)\"                                                   \n [26] \"Tenure_By_Household_Size(Total_2Person_Household)\"                                                   \n [27] \"Tenure_By_Household_Size(Total_3Person_Household)\"                                                   \n [28] \"Tenure_By_Household_Size(Total_4Person_Household)\"                                                   \n [29] \"Tenure_By_Household_Size(Total_5Person_Household)\"                                                   \n [30] \"Tenure_By_Household_Size(Total_6Person_Household)\"                                                   \n [31] \"Median_Year_Structure_Built_By_Tenure(Median_Year_Structure_Built_for_Renter_Occupied_Units)\"        \n [32] \"Bedrooms(No_bedroom)\"                                                                                \n [33] \"Bedrooms(1_bedroom)\"                                                                                 \n [34] \"Bedrooms(2_bedrooms)\"                                                                                \n [35] \"Bedrooms(3_or_more_bedrooms)\"                                                                        \n [36] \"Median_Number_Of_Rooms_By_Tenure(Median_number_of_rooms)\"                                            \n [37] \"Median_Number_Of_Rooms_By_Tenure(Median_number_of_rooms__Owner_occupied)\"                            \n [38] \"Median_Number_Of_Rooms_By_Tenure(Median_number_of_rooms__Renter_occupied)\"                           \n [39] \"Units_In_Structure(1unit_detached_structure)\"                                                        \n [40] \"Units_In_Structure(1unit_attached_structure)\"                                                        \n [41] \"Units_In_Structure(2_to_4_units)\"                                                                    \n [42] \"Units_In_Structure(5_to_19_units)\"                                                                   \n [43] \"Units_In_Structure(20_or_more_units)\"                                                                \n [44] \"Units_In_Structure(Mobile_home_Boat_RV_van_et)\"                                                      \n [45] \"Owner_Tenure_By_Units_In_Structure(Owneroccupied_housing_units)\"                                     \n [46] \"Owner_Tenure_By_Units_In_Structure(1_detached)\"                                                      \n [47] \"Owner_Tenure_By_Units_In_Structure(1_attached)\"                                                      \n [48] \"Owner_Tenure_By_Units_In_Structure(2_to_4)\"                                                          \n [49] \"Owner_Tenure_By_Units_In_Structure(5_to_19)\"                                                         \n [50] \"Owner_Tenure_By_Units_In_Structure(20_or_more_units)\"                                                \n [51] \"Owner_Tenure_By_Units_In_Structure(Mobile_home_Boat_RV_van_et)\"                                      \n [52] \"Renter_Tenure_By_Units_In_Structure(Renteroccupied_housing_units)\"                                   \n [53] \"Renter_Tenure_By_Units_In_Structure(1_detached)\"                                                     \n [54] \"Renter_Tenure_By_Units_In_Structure(1_attached)\"                                                     \n [55] \"Renter_Tenure_By_Units_In_Structure(2_to_4)\"                                                         \n [56] \"Renter_Tenure_By_Units_In_Structure(5_to_19)\"                                                        \n [57] \"Renter_Tenure_By_Units_In_Structure(20_or_more_units)\"                                               \n [58] \"Renter_Tenure_By_Units_In_Structure(Mobile_home_Boat_RV_van_et)\"                                     \n [59] \"Owner_Tenure_By_Year_Structure_Built(Owner_occupied_housing_units_Built_2000_or_later)\"              \n [60] \"Owner_Tenure_By_Year_Structure_Built(Owner_occupied_housing_units_Built_1980_to_1999)\"               \n [61] \"Owner_Tenure_By_Year_Structure_Built(Owner_occupied_housing_units_Built_1950_to_1979)\"               \n [62] \"Owner_Tenure_By_Year_Structure_Built(Owner_occupied_housing_units_Built_1949_or_earlier)\"            \n [63] \"Renter_Tenure_By_Year_Structure_Built(Renter_occupied_housing_units_Built_2000_or_later)\"            \n [64] \"Renter_Tenure_By_Year_Structure_Built(Renter_occupied_housing_units_Built_1980_to_1999)\"             \n [65] \"Renter_Tenure_By_Year_Structure_Built(Renter_occupied_housing_units_Built_1950_to_1979)\"             \n [66] \"Renter_Tenure_By_Year_Structure_Built(Renter_occupied_housing_units_Built_1949_or_earlier)\"          \n [67] \"Renter_Tenure_By_Year_Structure_Built(Renter_occupied_housing_units_Built_before_1980)\"              \n [68] \"Housing_units_Built_2000_or_later\"                                                                   \n [69] \"Owner_occupied_housing_units_Built_1980_to_1999\"                                                     \n [70] \"Owner_occupied_housing_units_Built_1950_to_1979\"                                                     \n [71] \"Owner_occupied_housing_units_Built_1949_or_earlier\"                                                  \n [72] \"Contract_Rent(With_cash_rent_less_than_499)\"                                                         \n [73] \"Contract_Rent(500_to_599)\"                                                                           \n [74] \"Contract_Rent(600_to_699)\"                                                                           \n [75] \"Contract_Rent(700_to_799)\"                                                                           \n [76] \"Contract_Rent(800_to_899)\"                                                                           \n [77] \"Contract_Rent(900_to_999)\"                                                                           \n [78] \"Contract_Rent(1000_to_1249)\"                                                                         \n [79] \"Contract_Rent(1250_to_1499)\"                                                                         \n [80] \"Contract_Rent(1500_to_1999)\"                                                                         \n [81] \"Contract_Rent(2000_or_more)\"                                                                         \n [82] \"Contract_Rent(No_cash_rent)\"                                                                         \n [83] \"Tenure_By_Bedrooms(Owner_occupied_housing_units_with_No_bedroom)\"                                    \n [84] \"Tenure_By_Bedrooms(Owner_occupied_housing_units_with_1_bedroom)\"                                     \n [85] \"Tenure_By_Bedrooms(Owner_occupied_housing_units_with_2_bedrooms)\"                                    \n [86] \"Tenure_By_Bedrooms(Owner_occupied_housing_units_with_3_or_more_bedrooms)\"                            \n [87] \"Tenure_By_Bedrooms(Renter_occupied_housing_units_with_No_bedroom)\"                                   \n [88] \"Tenure_By_Bedrooms(Renter_occupied_housing_units_with_1_bedroom)\"                                    \n [89] \"Tenure_By_Bedrooms(Renter_occupied_housing_units_with_2_bedrooms)\"                                   \n [90] \"Tenure_By_Bedrooms(Renter_occupied_housing_units_with_3_or_more_bedrooms)\"                           \n [91] \"Median_value__Owneroccupied_housing_units\"                                                           \n [92] \"Median_value_for_units_with_a_mortgage\"                                                              \n [93] \"Median_value_for_units_without_a_mortgage\"                                                           \n [94] \"Tenure_By_Selected_Physical_And_Financial_Conditions(Owner_occupied_With_one_selected_condition)\"    \n [95] \"Tenure_By_Selected_Physical_And_Financial_Conditions(Owner_occupied_With_two_selected_conditions)\"   \n [96] \"Tenure_By_Selected_Physical_And_Financial_Conditions(Owner_occupied_With_three_selected_conditions)\" \n [97] \"Tenure_By_Selected_Physical_And_Financial_Conditions(Owner_occupied_With_four_selected_conditions)\"  \n [98] \"Tenure_By_Selected_Physical_And_Financial_Conditions(Owner_occupied_No_selected_conditions)\"         \n [99] \"Tenure_By_Selected_Physical_And_Financial_Conditions(Renter_occupied_With_one_selected_condition)\"   \n[100] \"Tenure_By_Selected_Physical_And_Financial_Conditions(Renter_occupied_With_two_selected_conditions)\"  \n[101] \"Tenure_By_Selected_Physical_And_Financial_Conditions(Renter_occupied_With_three_selected_conditions)\"\n[102] \"Tenure_By_Selected_Physical_And_Financial_Conditions(Renter_occupied_With_four_selected_conditions)\" \n[103] \"Tenure_By_Selected_Physical_And_Financial_Conditions(Renter_occupied_No_selected_conditions)\"        \n[104] \"Shape__Area\"                                                                                         \n[105] \"Shape__Length\"                                                                                       \n\n\nCode\nwrite.csv(data, \"data.csv\", row.names = FALSE)",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Data</span>"
    ]
  },
  {
    "objectID": "results.html",
    "href": "results.html",
    "title": "3  Results",
    "section": "",
    "text": "Code\nlibrary(tidyverse) \n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nCode\nlibrary(naniar) \n\n\nWarning: package 'naniar' was built under R version 4.4.2\n\n\nCode\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(reshape2)\n\n\n\nAttaching package: 'reshape2'\n\nThe following object is masked from 'package:tidyr':\n\n    smiths\n\n\nCode\ninput &lt;- \"data.csv\"\ndata &lt;- read.csv(input)\n\n\n\nProportion of occupied vs vacant housing units across counties.\n\n\n\nCode\noccupancy_data &lt;- data.frame(\n  Category = c(\"Occupied Housing Units\", \"Vacant Housing Units\"),\n  Values = c(\n    sum(data$`Occupancy_Status.Occupied_housing_units.`, na.rm = TRUE),\n    sum(data$`Occupancy_Status.Vacant.`, na.rm = TRUE)\n  )\n) %&gt;%\n  mutate(Percentage = round(Values / sum(Values) * 100, 1)) \n\n# Enhanced plot\nggplot(occupancy_data, aes(x = \"\", y = Values, fill = Category)) +\n  geom_bar(stat = \"identity\", width = 1, color = \"white\") +\n  coord_polar(\"y\", start = 0) +\n  geom_text(aes(label = paste0(Percentage, \"%\")), \n            position = position_stack(vjust = 0.5), \n            size = 5, color = \"white\") + # Add percentage labels\n  theme_minimal(base_size = 16) +\n  labs(title = \"Occupied vs Vacant Housing Units\", fill\n       = \"Housing Type\") +\n  theme(axis.text = element_blank(), \n        axis.title = element_blank(), \n        panel.grid = element_blank(),\n        plot.title = element_text(hjust = 0.5, face = \"bold\"))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nstate_occupancy_data &lt;- data %&gt;%\n  group_by(STATE_NAME) %&gt;%\n  summarise(\n    Total = sum(`Occupancy_Status.Total_Housing_units.`, na.rm = TRUE),\n    Occupied = sum(`Occupancy_Status.Occupied_housing_units.`, na.rm = TRUE),\n    Vacant = sum(`Occupancy_Status.Vacant.`, na.rm = TRUE)\n  ) %&gt;%\n  pivot_longer(cols = c(\"Total\", \"Occupied\", \"Vacant\"), names_to = \"Status\", values_to = \"Units\")\n\nstate_occupancy_data &lt;- state_occupancy_data %&gt;%\n  mutate(Region = case_when(\n    STATE_NAME %in% c(\"Connecticut\", \"Maine\", \"Massachusetts\", \"New Hampshire\", \"Rhode Island\", \"Vermont\",\n                      \"New Jersey\", \"New York\", \"Pennsylvania\") ~ \"Northeast\",\n    STATE_NAME %in% c(\"Illinois\", \"Indiana\", \"Iowa\", \"Kansas\", \"Michigan\", \"Minnesota\", \"Missouri\", \"Nebraska\",\n                      \"North Dakota\", \"Ohio\", \"South Dakota\", \"Wisconsin\") ~ \"Midwest\",\n    STATE_NAME %in% c(\"Alabama\", \"Arkansas\", \"Delaware\", \"Florida\", \"Georgia\", \"Kentucky\", \"Louisiana\", \n                      \"Maryland\", \"Mississippi\", \"North Carolina\", \"Oklahoma\", \"South Carolina\", \"Tennessee\",\n                      \"Texas\", \"Virginia\", \"West Virginia\") ~ \"South\",\n    STATE_NAME %in% c(\"Alaska\", \"Arizona\", \"California\", \"Colorado\", \"Hawaii\", \"Idaho\", \"Montana\", \"Nevada\", \n                      \"New Mexico\", \"Oregon\", \"Utah\", \"Washington\", \"Wyoming\") ~ \"West\"\n  ))\n\nggplot(state_occupancy_data, aes(x = Region, y = Units, fill = Status)) +\n  geom_bar(stat = \"identity\", position = \"dodge\") +\n  facet_wrap(~Status, ncol = 1, scales = \"free_y\") +\n  theme_minimal(base_size = 14) +\n  labs(title = \"Distribution of Housing by Region and Occupancy Status\",\n       x = \"Region\", y = \"Number of Units\") +\n  theme(axis.text.x = element_text(angle = 0, hjust = 0.5))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nstructure_data &lt;- data %&gt;%\n  summarise(\n    Detached = sum(`Units_In_Structure.1unit_detached_structure.`, na.rm = TRUE),\n    Attached = sum(`Units_In_Structure.1unit_attached_structure.`, na.rm = TRUE),\n    `2-4 Units` = sum(`Units_In_Structure.2_to_4_units.`, na.rm = TRUE),\n    `5-19 Units` = sum(`Units_In_Structure.5_to_19_units.`, na.rm = TRUE),\n    `20+ Units` = sum(`Units_In_Structure.20_or_more_units.`, na.rm = TRUE),\n    Mobile = sum(`Units_In_Structure.Mobile_home_Boat_RV_van_et.`, na.rm = TRUE)\n  ) %&gt;%\n  pivot_longer(cols = everything(), names_to = \"Structure_Type\", values_to = \"Units\")\n\n# Plot\nggplot(structure_data, aes(x = Structure_Type, y = Units, fill = Structure_Type)) +\n  geom_bar(stat = \"identity\") +\n  theme_minimal(base_size = 14) +\n  labs(title = \"Housing Units by Structure Type\", x = \"Structure Type\", y = \"Number of Units\") +\n  theme(legend.position = \"none\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nyear_built_data &lt;- data %&gt;%\n  summarise(\n    `Owner 2000+` = sum(`Owner_Tenure_By_Year_Structure_Built.Owner_occupied_housing_units_Built_2000_or_later.`, na.rm = TRUE),\n    `Owner 1980-1999` = sum(`Owner_Tenure_By_Year_Structure_Built.Owner_occupied_housing_units_Built_1980_to_1999.`, na.rm = TRUE),\n    `Owner 1950-1979` = sum(`Owner_Tenure_By_Year_Structure_Built.Owner_occupied_housing_units_Built_1950_to_1979.`, na.rm = TRUE),\n    `Owner &lt;1949` = sum(`Owner_Tenure_By_Year_Structure_Built.Owner_occupied_housing_units_Built_1949_or_earlier.`, na.rm = TRUE),\n    `Renter 2000+` = sum(`Renter_Tenure_By_Year_Structure_Built.Renter_occupied_housing_units_Built_2000_or_later.`, na.rm = TRUE),\n    `Renter 1980-1999` = sum(`Renter_Tenure_By_Year_Structure_Built.Renter_occupied_housing_units_Built_1980_to_1999.`, na.rm = TRUE),\n    `Renter 1950-1979` = sum(`Renter_Tenure_By_Year_Structure_Built.Renter_occupied_housing_units_Built_1950_to_1979.`, na.rm = TRUE),\n    `Renter &lt;1949` = sum(`Renter_Tenure_By_Year_Structure_Built.Renter_occupied_housing_units_Built_1949_or_earlier.`, na.rm = TRUE)\n  ) %&gt;%\n  pivot_longer(cols = everything(), names_to = \"Category\", values_to = \"Units\") %&gt;%\n  separate(Category, into = c(\"Tenure\", \"Period\"), sep = \" \")\n\n# Plot\nggplot(year_built_data, aes(x = Period, y = Units, group = Tenure, color = Tenure)) +\n  geom_line(size = 1.2) +\n  theme_minimal(base_size = 14) +\n  labs(title = \"Housing Units Built Over Time by Ownership Type\",\n       x = \"Period\", y = \"Number of Units\", color = \"Tenure\")\n\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nbedroom_data &lt;- data %&gt;%\n  summarise(\n    `Owner No Bedroom` = sum(`Tenure_By_Bedrooms.Owner_occupied_housing_units_with_No_bedroom.`, na.rm = TRUE),\n    `Owner 1 Bedroom` = sum(`Tenure_By_Bedrooms.Owner_occupied_housing_units_with_1_bedroom.`, na.rm = TRUE),\n    `Owner 2 Bedrooms` = sum(`Tenure_By_Bedrooms.Owner_occupied_housing_units_with_2_bedrooms.`, na.rm = TRUE),\n    `Owner 3+ Bedrooms` = sum(`Tenure_By_Bedrooms.Owner_occupied_housing_units_with_3_or_more_bedrooms.`, na.rm = TRUE),\n    `Renter No Bedroom` = sum(`Tenure_By_Bedrooms.Renter_occupied_housing_units_with_No_bedroom.`, na.rm = TRUE),\n    `Renter 1 Bedroom` = sum(`Tenure_By_Bedrooms.Renter_occupied_housing_units_with_1_bedroom.`, na.rm = TRUE),\n    `Renter 2 Bedrooms` = sum(`Tenure_By_Bedrooms.Renter_occupied_housing_units_with_2_bedrooms.`, na.rm = TRUE),\n    `Renter 3+ Bedrooms` = sum(`Tenure_By_Bedrooms.Renter_occupied_housing_units_with_3_or_more_bedrooms.`, na.rm = TRUE)\n  ) %&gt;%\n  pivot_longer(cols = everything(), names_to = \"Category\", values_to = \"Units\") %&gt;%\n  separate(Category, into = c(\"Tenure\", \"Bedrooms\"), sep = \" \")\n\n\nWarning: Expected 2 pieces. Additional pieces discarded in 8 rows [1, 2, 3, 4, 5, 6, 7,\n8].\n\n\nCode\n# Plot\nggplot(bedroom_data, aes(x = Bedrooms, y = Units, fill = Tenure)) +\n  geom_bar(stat = \"identity\", position = \"stack\") +\n  theme_minimal(base_size = 14) +\n  labs(title = \"Bedrooms Distribution by Tenure\", x = \"Number of Bedrooms\", y = \"Number of Units\", fill = \"Tenure\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\n# Filter data for valid, non-missing, and positive values\nfiltered_data &lt;- data %&gt;%\n  filter(!is.na(Median_value_for_units_with_a_mortgage) &\n         !is.na(Contract_Rent.1000_to_1249.) &\n         Median_value_for_units_with_a_mortgage &gt; 0 &\n         Contract_Rent.1000_to_1249. &gt; 0)\n\n# Scatter plot with regression line\nggplot(filtered_data, aes(x = Median_value_for_units_with_a_mortgage, \n                          y = Contract_Rent.1000_to_1249.)) +\n  geom_point(alpha = 0.6) +\n  geom_smooth(method = \"lm\", color = \"blue\", se = FALSE) +\n  theme_minimal(base_size = 14) +\n  labs(\n    title = \"Relationship Between Median Housing Value and Rent\",\n    x = \"Median Value for Units with Mortgage\",\n    y = \"Units with Rent $1000-$1249\"\n  )\n\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nheatmap_data &lt;- data %&gt;%\n  summarise(\n    No_Bedroom = sum(Bedrooms.No_bedroom., na.rm = TRUE),\n    One_Bedroom = sum(Bedrooms.1_bedroom., na.rm = TRUE),\n    Two_Bedrooms = sum(Bedrooms.2_bedrooms., na.rm = TRUE),\n    Three_Bedrooms = sum(Bedrooms.3_or_more_bedrooms., na.rm = TRUE),\n    Rent_500_to_599 = sum(Contract_Rent.500_to_599., na.rm = TRUE),\n    Rent_600_to_699 = sum(Contract_Rent.600_to_699., na.rm = TRUE)\n  )\n\nheatmap_data &lt;- melt(heatmap_data)\n\n\nNo id variables; using all as measure variables\n\n\nCode\nheatmap_data$Category &lt;- ifelse(grepl(\"Bedroom\", heatmap_data$variable), \"Bedroom\", \"Rent\")\n\n# Faceted bar plot\nggplot(heatmap_data, aes(x = variable, y = value, fill = Category)) +\n  geom_bar(stat = \"identity\") +\n  facet_wrap(~Category, scales = \"free\") +\n  labs(title = \"Counts of Bedrooms and Rent Ranges\",\n       x = \"Variable\",\n       y = \"Count\") +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +\n  scale_fill_brewer(palette = \"Set2\", name = \"Category\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nfiltered_data &lt;- data %&gt;%\n  filter(Median_Year_Structure_Built_By_Tenure.Median_Year_Structure_Built_for_Renter_Occupied_Units. &gt;= 1990 & \n         Median_Year_Structure_Built_By_Tenure.Median_Year_Structure_Built_for_Renter_Occupied_Units. &lt;= 2022)\n\n# Create the boxplot with smaller y-axis labels\nggplot(filtered_data, aes(x = reorder(STATE_NAME, Median_Year_Structure_Built_By_Tenure.Median_Year_Structure_Built_for_Renter_Occupied_Units., median),\n                          y = Median_Year_Structure_Built_By_Tenure.Median_Year_Structure_Built_for_Renter_Occupied_Units.)) +\n  geom_boxplot(outlier.alpha = 0.3, fill = \"skyblue\", alpha = 0.6) +\n  theme_minimal(base_size = 14) +\n  labs(\n    title = \"Variance in Year Built for Units by State (1990+)\",\n    x = \"State (Ordered by Median Year Built)\",\n    y = \"Year Built\"\n  ) +\n  theme(\n    axis.text.y = element_text(size = 8, hjust = 0.5),  # Make y-axis labels smaller\n    axis.title.x = element_text(size = 12),\n    axis.title.y = element_text(size = 12),\n    plot.margin = margin(20, 50, 20, 50)  # Add extra padding around the plot\n  ) +\n  scale_y_continuous(expand = expansion(mult = c(0.1, 0.1))) +  # Add space above and below the boxplots\n  coord_flip()  # Flip coordinates for better readability\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nownership_data_by_state &lt;- data %&gt;%\n  group_by(STATE_NAME) %&gt;%\n  summarise(\n    Owner_Occupied = sum(`Tenure_By_Household_Size.Owner_Occupied.`, na.rm = TRUE),\n    Renter_Occupied = sum(`Tenure_By_Household_Size.Renter_Occupied.`, na.rm = TRUE)\n  ) %&gt;%\n  pivot_longer(cols = c(Owner_Occupied, Renter_Occupied), names_to = \"Ownership\", values_to = \"Units\")\n\nownership_diff &lt;- ownership_data_by_state %&gt;%\n  pivot_wider(names_from = Ownership, values_from = Units) %&gt;%\n  mutate(Difference = abs(Owner_Occupied - Renter_Occupied))\n\n# Filter to keep only top N states by difference\ntop_states &lt;- ownership_diff %&gt;%\n  arrange(desc(Difference)) %&gt;%\n  slice_head(n = 10)  # Adjust 'n' to the desired number of top states\n\n# Plot the filtered data\nggplot(top_states, aes(x = reorder(STATE_NAME, -Difference))) +\n  geom_point(aes(y = Owner_Occupied, color = \"Owner Occupied\"), size = 3) +\n  geom_point(aes(y = Renter_Occupied, color = \"Renter Occupied\"), size = 3) +\n  geom_segment(aes(xend = STATE_NAME, y = Owner_Occupied, yend = Renter_Occupied), color = \"gray\") +\n  coord_flip() +\n  labs(\n    title = \"Top States with Highest Difference in Ownership vs Renting\",\n    x = \"State\",\n    y = \"Proportion of Units\",\n    color = \"Ownership Type\"\n  ) +\n  theme_minimal(base_size = 14) +\n  theme(\n    axis.text.y = element_text(size = 10),\n    plot.title = element_text(size = 16, face = \"bold\")\n  )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nlibrary(dplyr)\nlibrary(ggplot2)\n\n# Summarize structure types\nstructure_types &lt;- data %&gt;%\n  summarise(\n    Detached = sum(`Units_In_Structure.1unit_detached_structure.`, na.rm = TRUE),\n    Attached = sum(`Units_In_Structure.1unit_attached_structure.`, na.rm = TRUE),\n    Two_to_Four_Units = sum(`Units_In_Structure.2_to_4_units.`, na.rm = TRUE),\n    Five_to_Nineteen_Units = sum(`Units_In_Structure.5_to_19_units.`, na.rm = TRUE),\n    Twenty_or_More_Units = sum(`Units_In_Structure.20_or_more_units.`, na.rm = TRUE)\n  ) %&gt;%\n  pivot_longer(cols = everything(), names_to = \"Structure_Type\", values_to = \"Units\")\n\n# Plot the proportions of units by structure type\nggplot(structure_types, aes(x = Structure_Type, y = Units, fill = Structure_Type)) +\n  geom_bar(stat = \"identity\", alpha = 0.8) +\n  coord_flip() +\n  labs(\n    title = \"Proportion of Housing Units by Structure Type\",\n    x = \"Structure Type\",\n    y = \"Number of Units\"\n  ) +\n  theme_minimal(base_size = 14) +\n  theme(\n    axis.text.x = element_text(size = 12),\n    axis.text.y = element_text(size = 12),\n    plot.title = element_text(size = 16, face = \"bold\")\n  )",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Results</span>"
    ]
  },
  {
    "objectID": "data.html#creating-data-for-d3graph",
    "href": "data.html#creating-data-for-d3graph",
    "title": "2  Data",
    "section": "2.4 Creating data for d3Graph",
    "text": "2.4 Creating data for d3Graph\n\n\nCode\nlibrary(jsonlite)\n\n\n\nAttaching package: 'jsonlite'\n\n\nThe following object is masked from 'package:purrr':\n\n    flatten\n\n\nCode\nstate_data &lt;- data |&gt;\n  group_by(STATE_NAME) |&gt;\n  summarise(\n    state_median = median(Median_value_for_units_with_a_mortgage, na.rm = TRUE),\n    .groups = \"drop\"\n  )\n\ntop_counties_data &lt;- data |&gt;\n  group_by(STATE_NAME) |&gt;\n  arrange(desc(Median_value_for_units_with_a_mortgage)) |&gt;\n  slice_head(n = 5) |&gt;\n  select(STATE_NAME, county = NAME, value = Median_value_for_units_with_a_mortgage) |&gt;\n  nest(top_counties = c(county, value))\n\nstate_json &lt;- state_data |&gt;\n  left_join(top_counties_data, by = \"STATE_NAME\")\n\nwrite_json(state_json, \"d3Data/d3Data.json\", pretty = TRUE)\n\n\n\n\nCode\nmissing_summary &lt;- data |&gt;\n  summarise_all(~sum(is.na(.))) |&gt;\n  pivot_longer(cols = everything(), \n               names_to = \"Variable\", \n               values_to = \"Missing_Count\") |&gt;\n  arrange(desc(Missing_Count))\n\ndata_with_missing &lt;- data |&gt;\n  select(where(~ any(is.na(.))))\n\ncolumns_with_missing &lt;- missing_summary |&gt;\n  filter(Missing_Count &gt; 0)\n\n# Print only columns with missing values\nprint(columns_with_missing)\n\n\n# A tibble: 4 × 2\n  Variable                                                         Missing_Count\n  &lt;chr&gt;                                                                    &lt;int&gt;\n1 Median_value_for_units_with_a_mortgage                                      10\n2 Median_value_for_units_without_a_mortgage                                    6\n3 Median_value__Owneroccupied_housing_units                                    5\n4 Median_Number_Of_Rooms_By_Tenure(Median_number_of_rooms__Owner_…             1\n\n\n\n\nCode\nggplot(columns_with_missing, aes(x = reorder(Variable, -Missing_Count), y = Missing_Count)) +\n  geom_bar(stat = \"identity\", fill = \"skyblue\") +\n  coord_flip() +\n  labs(title = \"Missing Values per Column (Filtered)\", x = \"Columns\", y = \"Count of Missing Values\") +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\nThis bar chart shows the count of missing values for the columns that have data missing. It is able to show that the mssing values are concentrated into these few variables but Mortgage_Status_By_Median_Value(Median_value_for_units_with_a_mortgage) has the most at 10 missing. The overall low missing values shows that the data quality is very high and there really is no need to inpute or remove.\n\n\nCode\nmissing_percentage &lt;- data_with_missing |&gt;\n  summarise_all(~ mean(is.na(.)) * 100) |&gt;\n  pivot_longer(cols = everything(), names_to = \"Variable\", values_to = \"Percentage_Missing\")\n\n# Bar plot for missing percentage\nggplot(missing_percentage, aes(x = reorder(Variable, -Percentage_Missing), y = Percentage_Missing)) +\n  geom_bar(stat = \"identity\", fill = \"tomato\") +\n  coord_flip() +\n  labs(title = \"Percentage of Missing Values per Column\", x = \"Columns\", y = \"Percentage Missing\") +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\nThis graph shows how missing data is very minimal for all the columns that include missing values. The highest missing percentage is less than 0.3% this shows how reliable and unnecessary imputation of extra cleaning is.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Data</span>"
    ]
  }
]